version: 2.1

orbs:
  codecov: codecov/codecov@3

jobs:
  test-linux:
    parameters:
      python-version:
        type: string
      dimod-numpy-version:
        type: string

    docker:
      - image: cimg/python:<< parameters.python-version >>

    steps:
      - checkout

      - restore_cache: &restore-cache-env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &create-virtualenv
          name: Create virtual environment
          command: |
            python -m venv env

      - run: &install-requirements
          name: Install requirements
          command: |
            . env/bin/activate
            pip install -U pip
            pip install -r requirements.txt -r tests/requirements.txt
            pip install wheel twine

      - run:
          name: Install appropriate dimod version
          command: |
            . env/bin/activate
            if [[ "<< parameters.dimod-numpy-version >>" ]]; then
              pip install << parameters.dimod-numpy-version >>
            else
              pip uninstall dimod dwave-networkx -y
            fi

      - save_cache: &save-cache-env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - env

      - run: &build-package
          name: Build package
          command: env/bin/python setup.py sdist bdist_wheel

      - run: &install-package
          name: Install package
          command: env/bin/pip install .

      - run: &run-python-tests
          name: Run Python tests
          command: |
            . env/bin/activate
            coverage run -m unittest discover
            coverage xml

      - codecov/upload: &upload-python-code-coverage
          file: coverage.xml

  test-macos:
    parameters:
      python-version:
        type: string
      xcode:
        type: string

    macos:
      xcode: << parameters.xcode >>

    steps:
      - checkout

      # install `python-version` and cache it
      - when:
          condition:
            matches:
              pattern: "^3\\.[123][123456789].*$"
              value: << parameters.python-version >>
          steps:
            - run:
                name: Update brew to get latest pyenv
                command: brew update

      - run: &brew-install-pyenv
          name: Install pyenv
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv

      - restore_cache: &restore-cache-pyenv
          keys:
            - v1-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>

      - run: &pyenv-install-python
          name: Install python
          command: pyenv install << parameters.python-version >> -s

      - run: &pyenv-set-system-python
          name: Set system python
          command: |
            echo -e '\n\n# Initialize pyenv' >> ~/.bash_profile
            echo 'eval "$(pyenv init --path 2>/dev/null || true)"' >> ~/.bash_profile
            echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
            pyenv global << parameters.python-version >>

      - save_cache: &save-cache-pyenv
          key: v1-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>
          paths:
            - ~/.pyenv

      # install dependencies and cache them
      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: *install-package

      - run: *run-python-tests

  test-docs:
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout

      - run: *create-virtualenv

      - run: *install-requirements

      - run:
          name: Install docs requirements
          command: env/bin/pip install -r docs/requirements.txt

      - run: *install-package

      - run:
          name: Build docs
          command: |
            . env/bin/activate
            make -C docs/ html

      - store_artifacts:
          path: ./docs/build/html

      - run:
          name: Test docs
          command: |
            . env/bin/activate
            make -C docs/ doctest

      - run:
          name: Test links
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

  pypi-deploy:
    docker:
      - image: cimg/python:3.9

    steps:
      - checkout

      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: *build-package

      - store_artifacts:
          path: ./dist

      - run:
          name: Upload package to PyPI
          command: env/bin/twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*


workflows:
  test:
    jobs:
      - test-linux:
          name: test-linux-py<< matrix.python-version >><<# matrix.dimod-numpy-version >> | << matrix.dimod-numpy-version >><</ matrix.dimod-numpy-version >>
          context: &ctx-build "ocean-build"
          matrix:
            parameters:
              python-version: &python-versions ["3.8", "3.9", "3.10", "3.11"]
              dimod-numpy-version: ["", "dimod~=0.9.0 numpy~=1.23.0", "dimod~=0.10.0", "dimod~=0.11.0", "dimod~=0.12.0"]
            exclude:
              # dimod < 0.10 not supported on py310+
              - python-version: "3.10"
                dimod-numpy-version: "dimod~=0.9.0 numpy~=1.23.0"
              - python-version: "3.11"
                dimod-numpy-version: "dimod~=0.9.0 numpy~=1.23.0"
              # dimod < 0.12 not supported on py311+
              - python-version: "3.11"
                dimod-numpy-version: "dimod~=0.10.0"
              - python-version: "3.11"
                dimod-numpy-version: "dimod~=0.11.0"

      - test-macos:
          name: test-macos-py<< matrix.python-version >>
          context: *ctx-build
          matrix:
            parameters:
              python-version: *python-versions
              xcode: ["13.2.0"]

      - test-docs

  deploy:
    jobs:
      - pypi-deploy:
          context: ocean-publish
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
